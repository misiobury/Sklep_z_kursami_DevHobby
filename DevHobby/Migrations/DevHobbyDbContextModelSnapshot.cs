// <auto-generated />
using DevHobby.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevHobby.Migrations
{
    [DbContext(typeof(DevHobbyDbContext))]
    partial class DevHobbyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DevHobby.Models.Entities.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("CourseId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"), 1L, 1);

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChapterId");

                    b.HasIndex("ContentId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("ContentId");

                    b.HasIndex("CourseId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCourseOfTheMonth")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecommended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Description", b =>
                {
                    b.Property<int>("DescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DescriptionId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DescriptionId");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Faq", b =>
                {
                    b.Property<int>("FaqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaqId"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FaqId");

                    b.HasIndex("CourseId");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"), 1L, 1);

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonId");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Opinion", b =>
                {
                    b.Property<int>("OpinionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpinionId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<byte>("NumberOfStars")
                        .HasColumnType("tinyint");

                    b.HasKey("OpinionId");

                    b.HasIndex("CourseId");

                    b.ToTable("Opinions");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Requirement", b =>
                {
                    b.Property<int>("RequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequirementId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DescriptionId")
                        .HasColumnType("int");

                    b.HasKey("RequirementId");

                    b.HasIndex("DescriptionId");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.WhatWillYouLearn", b =>
                {
                    b.Property<int>("WhatWillYouLearnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WhatWillYouLearnId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DescriptionId")
                        .HasColumnType("int");

                    b.HasKey("WhatWillYouLearnId");

                    b.HasIndex("DescriptionId");

                    b.ToTable("WhatWillYouLearn");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.WhoIsThisCourseFor", b =>
                {
                    b.Property<int>("WhoIsThisCourseForId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WhoIsThisCourseForId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DescriptionId")
                        .HasColumnType("int");

                    b.HasKey("WhoIsThisCourseForId");

                    b.HasIndex("DescriptionId");

                    b.ToTable("WhoIsThisCourseFor");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Announcement", b =>
                {
                    b.HasOne("DevHobby.Models.Entities.Course", null)
                        .WithMany("Announcements")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Chapter", b =>
                {
                    b.HasOne("DevHobby.Models.Entities.Content", null)
                        .WithMany("Chapters")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Content", b =>
                {
                    b.HasOne("DevHobby.Models.Entities.Course", null)
                        .WithMany("CourseContent")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Course", b =>
                {
                    b.HasOne("DevHobby.Models.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Description", b =>
                {
                    b.HasOne("DevHobby.Models.Entities.Course", null)
                        .WithOne("Description")
                        .HasForeignKey("DevHobby.Models.Entities.Description", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Faq", b =>
                {
                    b.HasOne("DevHobby.Models.Entities.Course", null)
                        .WithMany("Faq")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Lesson", b =>
                {
                    b.HasOne("DevHobby.Models.Entities.Chapter", null)
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Opinion", b =>
                {
                    b.HasOne("DevHobby.Models.Entities.Course", null)
                        .WithMany("Opinions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Requirement", b =>
                {
                    b.HasOne("DevHobby.Models.Entities.Description", null)
                        .WithMany("Requirements")
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevHobby.Models.Entities.WhatWillYouLearn", b =>
                {
                    b.HasOne("DevHobby.Models.Entities.Description", null)
                        .WithMany("WhatWillYouLearn")
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevHobby.Models.Entities.WhoIsThisCourseFor", b =>
                {
                    b.HasOne("DevHobby.Models.Entities.Description", null)
                        .WithMany("WhoIsThisCourseFor")
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Chapter", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Content", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Course", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("CourseContent");

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Faq");

                    b.Navigation("Opinions");
                });

            modelBuilder.Entity("DevHobby.Models.Entities.Description", b =>
                {
                    b.Navigation("Requirements");

                    b.Navigation("WhatWillYouLearn");

                    b.Navigation("WhoIsThisCourseFor");
                });
#pragma warning restore 612, 618
        }
    }
}
